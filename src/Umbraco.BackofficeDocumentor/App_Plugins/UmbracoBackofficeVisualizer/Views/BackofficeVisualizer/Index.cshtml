@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using Umbraco.BackofficeDocumentor.Models
@using Umbraco.BackofficeDocumentor.Services
@model BackofficeDocumentModel

@functions
{

    string ContentTypeId(VisualizerContentTypeModel model)
    {
        return string.Format("cmp_{0}", model.Id);
    }

    bool IsValidJson(string strInput)
    {
        strInput = strInput.Trim();
        if ((strInput.StartsWith("{") && strInput.EndsWith("}")) || //For object
            (strInput.StartsWith("[") && strInput.EndsWith("]"))) //For array
        {
            try
            {
                var obj = JToken.Parse(strInput);
                return true;
            }
            catch (JsonReaderException jex)
            {
                //Exception in parsing json
                Console.WriteLine(jex.Message);
                return false;
            }
            catch (Exception ex) //some other exception
            {
                Console.WriteLine(ex.ToString());
                return false;
            }
        }
        else
        {
            return false;
        }
    }

}

@helper ContentTypeLink(VisualizerContentTypeModel model)
{
    if (model == null)
    {
        return;
    }
    <a class="small" href="#@ContentTypeId(model)">@(model.Name)</a>
}
@helper DocTypeDescriptor(VisualizerContentTypeModel cmp)
{
    <h2 id="@ContentTypeId(cmp)">
        <i class="@cmp.Icon"></i>
        @cmp.Name
        @if (cmp.Inherits != null || cmp.Implements.Any())
        {
            <text>: </text>
        }
        @ContentTypeLink(cmp.Inherits)
        @if (cmp.Inherits != null)
        {
            <span>, </span>
        }
        @foreach (var item in cmp.Implements)
        {
            @ContentTypeLink(item)
            if (cmp.Implements.IndexOf(item) < cmp.Implements.Count - 1)
            {
                <span>, </span>
            }
        }
    </h2>
    <h3>Definitions</h3>
    <table class="table table-bordered table-striped">
        <tr>
            <td>Name</td>
            <td>@cmp.Name</td>
        </tr>
        <tr>
            <td>Alias</td>
            <td>@cmp.Alias</td>
        </tr>
        <tr>
            <td>Icon</td>
            <td>@cmp.Icon</td>
        </tr>
        <tr>
            <td>Description</td>
            <td>@cmp.Description</td>
        </tr>

    </table>

}
@helper PropertiesDescriptiors(VisualizerContentTypeModel cmp)
{
    if (!cmp.Properties.Tabs.Any())
    {
        return;
    }
    <h3>Properties</h3>
    <table class="table table-bordered table-condensed table-striped">
        <thead>
            <tr>
                <th>Alias</th>
                <th>Name</th>
                <th>Description</th>
                <th>Data Type</th>
                <th>Required</th>
                <th>Regex</th>
            </tr>
        </thead>
        @foreach (var tab in cmp.Properties.Tabs)
        {
            <tr>

                <td colspan="6" class="text-center"><strong class="h3">@tab.Name</strong></td>

            </tr>
            foreach (var p in tab.Properties)
            {
                <tr>

                    <td>@p.Alias</td>
                    <td>@p.Name</td>
                    <td>@p.Description</td>
                    <td>@p.DataTypeName</td>
                    <td>@p.Required</td>
                    <td>@p.Regex</td>


                </tr>
            }
        }
    </table>
}

@helper DataTypeDescriptor(DataTypeDescripton dt)
{
    <h2>@dt.Name</h2>
    <h3>Definitions</h3>
    <table class="table table-bordered table-condensed table-striped">
        <tr>
            <td>Id</td>
            <td>@dt.Id</td>
        </tr>
        <tr>
            <td>Editor</td>
            <td>@dt.PropertyEditorAlias</td>
        </tr>
    </table>
    if (dt.PreValues.FormatAsDictionary().Any())
    {
        <h3>Prevalues</h3>
        <table class="table table-bordered">
            @foreach (var pv in dt.PreValues.FormatAsDictionary())
            {
                <tr>
                    <td>


                        @pv.Key
                    </td>
                    <td>
                        @if (pv.Value.Value != null && IsValidJson(pv.Value.Value))
                        {
                            <pre>@pv.Value.Value</pre>
                        }
                        else
                        {
                            <text>@pv.Value.Value</text>
                        }

                    </td>
                </tr>

            }
        </table>
    }


}

@helper Group(BackofficeDocumentGroupModel item)
{
    <section class="row" style="page-break-after: always;">
        <div class="col-xs-12">
         <h1>@item.Name</h1>
            @foreach (var cmp in item.ContentTypeDocs)
            {

                @DocTypeDescriptor(cmp)
                @PropertiesDescriptiors(cmp)

                <hr />

            }


        </div>
    </section>
}
<!DOCTYPE html>
<html lang="en">
<head>
    <title></title>
    <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
    <link href="/app_plugins/umbracobackofficevisualizer/css/bootstrap.min.css" rel="stylesheet" />
    <link href="/app_plugins/umbracobackofficevisualizer/css/umbraco-icons.css" rel="stylesheet" />
</head>
<body>
    <div class="container">
      
      @foreach (var group in Model.Groups)
      {
          @Group(group)
      }
        <section class="row">
            <div class="col-xs-12">
                <h1>Data Types</h1>

                @foreach (var dt in Model.DataTypes)
                {
                    @DataTypeDescriptor(dt)
                }
            </div>
        </section>
    </div>

</body>
</html>
